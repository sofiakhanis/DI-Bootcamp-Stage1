# -*- coding: utf-8 -*-
"""EXPHtmlW7D5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ota_BrH6JqjSJY_E2sSoOZ8bAovs5LMc
"""

html = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sports World</title>
    <style>
        body { font-family: Arial, sans-serif; }
        header, nav, section, article, footer { margin: 20px; padding: 15px; }
        nav { background-color: #333; }
        nav a { color: white; padding: 14px 20px; text-decoration: none; display: inline-block; }
        nav a:hover { background-color: #ddd; color: black; }
        .video { text-align: center; margin: 20px 0; }
    </style>
</head>
<body>

    <header>
        <h1>Welcome to Sports World</h1>
        <p>Your one-stop destination for the latest sports news and videos.</p>
    </header>

    <nav>
        <a href="#football">Football</a>
        <a href="#basketball">Basketball</a>
        <a href="#tennis">Tennis</a>
    </nav>

    <section id="football">
        <h2>Football</h2>
        <article>
            <h3>Latest Football News</h3>
            <p>Read about the latest football matches and player news.</p>
            <div class="video">
                <iframe width="560" height="315" src="https://www.youtube.com/embed/football-video-id" frameborder="0" allowfullscreen>
                </iframe>
            </div>
        </article>
    </section>

    <section id="basketball">
        <h2>Basketball</h2>
        <article>
            <h3>NBA Highlights</h3>
            <p>Watch highlights from the latest NBA games.</p>
            <div class="video">
                <iframe width="560" height="315" src="https://www.youtube.com/embed/basketball-video-id" frameborder="0" allowfullscreen>
                </iframe>
            </div>
        </article>
    </section>

    <section id="tennis">
        <h2>Tennis</h2>
        <article>
            <h3>Grand Slam Updates</h3>
            <p>Get the latest updates from the world of Grand Slam tennis.</p>
            <div class="video">
                <iframe width="560" height="315" src="https://www.youtube.com/embed/tennis-video-id" frameborder="0" allowfullscreen></iframe>
            </div>
        </article>
    </section>

    <footer>
        <form action="mailto:contact@sportsworld.com" method="post" enctype="text/plain">
            <label for="name">Name:</label><br>
            <input type="text" id="name" name="name"><br>
            <label for="email">Email:</label><br>
            <input type="email" id="email" name="email"><br>
            <label for="message">Message:</label><br>
            <textarea id="message" name="message" rows="4" cols="50"></textarea><br><br>
            <input type="submit" value="Send">
        </form>
    </footer>

</body>
</html> '''

from bs4 import BeautifulSoup
soup = BeautifulSoup(html, 'html.parser')
print(soup.prettify())

print(soup.title)

print(soup.find_all("p"))

print (soup.find_all("a"))

import requests

url = "https://en.wikipedia.org/robots.txt"

response = requests.get(url)
if response.status_code == 200:
    print("robots.txt content from Wikipedia:\n")
    print(response.text)
else:
    print(f"Failed to fetch robots.txt. Status code: {response.status_code}")

url2 = "https://en.wikipedia.org/wiki/Main_Page"
response2 = requests.get(url2)
if response2.status_code == 200:
    print("Wikipedia headers:\n")
    print(response2.headers)
else:
    print(f"Failed to fetch Wikipedia headers. Status code: {response2.status_code}")

if response2.status_code == 200:
    soup = BeautifulSoup(response.text, 'html.parser')
    title_tag = soup.title

    if title_tag and title_tag.string:
        print("Page contains a title:")
        print("Title:", title_tag.string.strip())
    else:
        print("No <title> tag found on the page.")
else:
    print(f"Failed to fetch the page. Status code: {response.status_code}")

url3 = "https://www.cisa.gov/news-events/cybersecurity-advisories?f%5B0%5D=advisory_type%3A93"
response3 = requests.get(url3)
soup3 = BeautifulSoup(response3.text, 'html.parser')

if response3.status_code == 200:
    print("It works.")
else:
    print(f"Failed to fetch. Status code: {response2.status_code}")

from datetime import datetime

current_year = datetime.now().year

alerts = soup.find_all('span', class_='date-display-single')
count = 0

for alert in alerts:
    date_str = alert.get_text(strip=True)
    try:
        date_obj = datetime.strptime(date_str, '%B %d, %Y')
        if date_obj.year == current_year:
            count += 1
    except ValueError:
        continue

print(f"Number of security alerts issued by US-CERT in {current_year}: {count}")

import random
import pandas as pd

url = "https://www.imdb.com/list/ls091294718/"
headers = {'User-Agent': 'Mozilla/5.0'}
response = requests.get(url, headers=headers)
soup = BeautifulSoup(response.text, 'html.parser')

movie_blocks = soup.find_all('div', class_='lister-item mode-detail')

if len(movie_blocks) < 10:
    print(f"Only {len(movie_blocks)} movies were found.")
    selected_movies = movie_blocks
else:
    selected_movies = random.sample(movie_blocks, 10)

movies_data = []

for movie in selected_movies:
    title_tag = movie.find('h3', class_='lister-item-header').find('a')
    year_tag = movie.find('span', class_='lister-item-year')
    description_tag = movie.find_all('p')[1]

    title = title_tag.text.strip() if title_tag else 'N/A'
    year = year_tag.text.strip() if year_tag else 'N/A'
    description = description_tag.text.strip() if description_tag else 'N/A'

    movies_data.append({
        'Title': title,
        'Year': year,
        'Description': description
    })

print(f"Extracted {len(movies_data)} movies:\n")
for m in movies_data:
    print(f"{m['Title']} ({m['Year']}): {m['Description'][:100]}...")

df = pd.DataFrame(movies_data)
print("\nDataFrame Preview:")
print(df.head())