# -*- coding: utf-8 -*-
"""MiniProjDailyW6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l8f70T58ZlE5u2EVoq31R3rRmodhbKvb
"""

from google.colab import files
uploaded = files.upload()

import sqlite3
import pandas as pd

conn = sqlite3.connect('database.sqlite')

tables = pd.read_sql("SELECT name FROM sqlite_master WHERE type='table';", conn)
print(tables)

for table_name in tables['name']:
    print(f"___{table_name}___")
    df = pd.read_sql(f"SELECT * FROM {table_name} LIMIT 5;", conn)
    print(df.columns.tolist())

query2 = "SELECT * FROM Player_Match;"
df_player_match = pd.read_sql(query2, conn)
df_player_match.head()

query3 = """
SELECT
    p.Player_Name,
    SUM(b.Runs_Scored) AS Total_Runs
FROM Batsman_Scored b
JOIN Ball_by_Ball bb
    ON b.Match_Id = bb.Match_Id AND b.Over_Id = bb.Over_Id AND b.Ball_Id = bb.Ball_Id
JOIN Player p
    ON bb.Striker = p.Player_Id
GROUP BY p.Player_Name
ORDER BY Total_Runs DESC;
"""
df_runs = pd.read_sql(query3, conn)
df_runs.head()

query3 = '''
WITH InningsScore AS (
    SELECT
        bb.Match_Id,
        bb.Innings_No,
        bb.Striker,
        SUM(bs.Runs_Scored) AS Total_Runs
    FROM Ball_by_Ball bb
    JOIN Batsman_Scored bs
        ON bb.Match_Id = bs.Match_Id AND bb.Over_Id = bs.Over_Id AND bb.Ball_Id = bs.Ball_Id
    GROUP BY bb.Match_Id, bb.Innings_No, bb.Striker
)
SELECT
    p.Player_Name,
    SUM(CASE WHEN i.Total_Runs BETWEEN 50 AND 99 THEN 1 ELSE 0 END) AS Fifties,
    SUM(CASE WHEN i.Total_Runs >= 100 THEN 1 ELSE 0 END) AS Hundreds
FROM InningsScore i
JOIN Player p ON i.Striker = p.Player_Id
GROUP BY p.Player_Name
ORDER BY Hundreds DESC, Fifties DESC; '''

df_inning = pd.read_sql (query3, conn)
df_inning.head()

query4 = '''SELECT
    p.Player_Name AS Bowler,
    wt.Match_Id,
    COUNT(wt.Player_Out) AS Wickets
FROM Wicket_Taken wt
JOIN Ball_by_Ball bb
    ON wt.Match_Id = bb.Match_Id AND wt.Over_Id = bb.Over_Id AND wt.Ball_Id = bb.Ball_Id
JOIN Player p
    ON bb.Bowler = p.Player_Id
GROUP BY p.Player_Name, wt.Match_Id
ORDER BY Wickets DESC;
'''

df_bowling = pd.read_sql (query4, conn)
df_bowling.head()

query5 = '''
WITH Runs AS (
    SELECT
        bb.Striker,
        SUM(bs.Runs_Scored) AS Total_Runs
    FROM Ball_by_Ball bb
    JOIN Batsman_Scored bs
        ON bb.Match_Id = bs.Match_Id AND bb.Over_Id = bs.Over_Id AND bb.Ball_Id = bs.Ball_Id
    GROUP BY bb.Striker
),
InningsRuns AS (
    SELECT
        bb.Match_Id,
        bb.Innings_No,
        bb.Striker,
        SUM(bs.Runs_Scored) AS Runs_Per_Innings
    FROM Ball_by_Ball bb
    JOIN Batsman_Scored bs
        ON bb.Match_Id = bs.Match_Id AND bb.Over_Id = bs.Over_Id AND bb.Ball_Id = bs.Ball_Id
    GROUP BY bb.Match_Id, bb.Innings_No, bb.Striker
),
FiftyHundred AS (
    SELECT
        Striker,
        SUM(CASE WHEN Runs_Per_Innings BETWEEN 50 AND 99 THEN 1 ELSE 0 END) AS Fifties,
        SUM(CASE WHEN Runs_Per_Innings >= 100 THEN 1 ELSE 0 END) AS Hundreds
    FROM InningsRuns
    GROUP BY Striker
),
Bowling AS (
    SELECT
        w.Bowler,
        MAX(w.Wickets) AS Best_Wickets
    FROM (
        SELECT
            bb.Bowler,
            wt.Match_Id,
            COUNT(wt.Player_Out) AS Wickets
        FROM Ball_by_Ball bb
        JOIN Wicket_Taken wt
            ON bb.Match_Id = wt.Match_Id AND bb.Over_Id = wt.Over_Id AND bb.Ball_Id = wt.Ball_Id
        GROUP BY bb.Bowler, wt.Match_Id
    ) w
    GROUP BY w.Bowler
)
SELECT
    p.Player_Name,
    r.Total_Runs,
    f.Fifties,
    f.Hundreds,
    b.Best_Wickets
FROM Player p
LEFT JOIN Runs r ON p.Player_Id = r.Striker
LEFT JOIN FiftyHundred f ON p.Player_Id = f.Striker
LEFT JOIN Bowling b ON p.Player_Id = b.Bowler
ORDER BY r.Total_Runs DESC NULLS LAST;
'''
df_player = pd.read_sql (query5, conn)
df_player.head()