# -*- coding: utf-8 -*-
"""Miniprojectxp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ckqPhHI0JNj0NTUP0PJMphVmNHMVhsy8
"""

import numpy as np # linear algebra
import pandas as pd
import sqlite3

df_olist_customers = pd.read_csv('olist_customers_dataset.csv')
df_olist_sellers = pd.read_csv('olist_sellers_dataset.csv')
df_olist_order_reviews= pd.read_csv('olist_order_reviews_dataset.csv')
df_olist_order_items= pd.read_csv('olist_order_items_dataset.csv')
df_olist_products= pd.read_csv('olist_products_dataset.csv')
df_olist_geolocation= pd.read_csv('olist_geolocation_dataset.csv')
df_product_category_name_translation= pd.read_csv('product_category_name_translation.csv')
df_olist_orders = pd.read_csv('olist_orders_dataset.csv')
df_olist_order_payments= pd.read_csv('olist_order_payments_dataset.csv')

df_olist_customers.head()

from sqlalchemy import create_engine
engine = create_engine('sqlite://', echo=False)

# export the dataframe as a table 'playstore' to the sqlite engine
df_olist_customers.to_sql("olist_customers", con =engine)
df_olist_sellers.to_sql("olist_sellers", con =engine)
df_olist_order_reviews.to_sql("olist_order_reviews", con =engine)
df_olist_order_items.to_sql("olist_order_items", con =engine)
df_olist_products.to_sql("olist_products_dataset", con =engine)
df_olist_geolocation.to_sql("olist_geolocation", con =engine)
df_product_category_name_translation.to_sql("product_category_name_translation", con =engine)
df_olist_orders.to_sql("olist_orders", con =engine)
df_olist_order_payments.to_sql("olist_order_payments", con =engine)
df_olist_order_payments.head()

sql='''

Select * from olist_customers
limit 5


''';


df_sql = pd.read_sql_query(sql,con=engine)
df_sql.head()

query1 = '''SELECT
    COUNT(*) AS count_orders_jan_2018_score_5,
    ROUND(
        COUNT(*) * 100.0 / (
            SELECT COUNT(*)
            FROM olist_orders o
            WHERE strftime('%Y-%m', o.order_purchase_timestamp) = '2018-01'
        ), 2
    ) AS percentage
FROM olist_orders o
JOIN olist_order_reviews r ON o.order_id = r.order_id
WHERE
    strftime('%Y-%m', o.order_purchase_timestamp) = '2018-01'
    AND r.review_score = 5;'''
df_sql = pd.read_sql_query(query1,con=engine)
df_sql.head()

query2 = '''
SELECT
    strftime('%Y', order_purchase_timestamp) AS year,
    COUNT(DISTINCT customer_id) AS total_customers,
    COUNT(order_id) AS total_orders
FROM olist_orders
GROUP BY year
ORDER BY year;
'''

df_sql = pd.read_sql_query(query2,con=engine)
df_sql.head()

query3 = '''SELECT
    c.customer_id,
    ROUND(SUM(i.price + i.freight_value), 2) AS total_value,
    COUNT(DISTINCT i.order_id) AS total_orders,
    ROUND(SUM(i.price + i.freight_value) / COUNT(DISTINCT i.order_id), 2) AS avg_order_value
FROM olist_order_items i
JOIN olist_orders o ON i.order_id = o.order_id
JOIN olist_customers c ON o.customer_id = c.customer_id
GROUP BY c.customer_id
ORDER BY avg_order_value DESC
LIMIT 10; '''

df_sql = pd.read_sql_query(query3,con=engine)
df_sql.head()

query4 = '''SELECT
    c.customer_city,
    ROUND(SUM(i.price + i.freight_value), 2) AS total_revenue
FROM olist_order_items i
JOIN olist_orders o ON i.order_id = o.order_id
JOIN olist_customers c ON o.customer_id = c.customer_id
WHERE strftime('%Y', o.order_purchase_timestamp) BETWEEN '2016' AND '2018'
GROUP BY c.customer_city
ORDER BY total_revenue DESC
LIMIT 5; '''

df_sql = pd.read_sql_query(query4,con=engine)
df_sql.head()

query5 = '''SELECT
    c.customer_state,
    ROUND(SUM(i.price + i.freight_value), 2) AS total_revenue
FROM olist_order_items i
JOIN olist_orders o ON i.order_id = o.order_id
JOIN olist_customers c ON o.customer_id = c.customer_id
WHERE strftime('%Y', o.order_purchase_timestamp) BETWEEN '2016' AND '2018'
GROUP BY c.customer_state
ORDER BY total_revenue DESC;
'''

df_sql = pd.read_sql_query(query5,con=engine)
df_sql.head()

query6 = '''SELECT
    s.seller_id,
    COUNT(i.product_id) AS total_items_sold,
    ROUND(SUM(i.price + i.freight_value), 2) AS total_revenue,
    COUNT(DISTINCT o.customer_id) AS total_customers,
    COUNT(r.review_id) FILTER (WHERE r.review_score = 5) AS five_star_reviews
FROM olist_order_items i
JOIN olist_orders o ON i.order_id = o.order_id
JOIN olist_sellers s ON i.seller_id = s.seller_id
LEFT JOIN olist_order_reviews r ON o.order_id = r.order_id
GROUP BY s.seller_id
ORDER BY total_items_sold DESC
LIMIT 10; '''

df_sql = pd.read_sql_query(query6,con=engine)
df_sql.head()

query7 = '''SELECT
    c.customer_state,
    COUNT(o.order_id) AS total_orders,
    COUNT(o.order_id) FILTER (WHERE o.order_delivered_customer_date IS NOT NULL) AS delivered_orders,
    ROUND(
        COUNT(o.order_id) FILTER (WHERE o.order_delivered_customer_date IS NOT NULL) * 100.0 / COUNT(o.order_id),
        2
    ) AS delivery_success_rate
FROM olist_orders o
JOIN olist_customers c ON o.customer_id = c.customer_id
GROUP BY c.customer_state
ORDER BY delivery_success_rate DESC;'''

df_sql = pd.read_sql_query(query7,con=engine)
df_sql.head()

query8 = '''SELECT
    p.product_category_name,
    pay.payment_type,
    COUNT(*) AS total_payments
FROM olist_order_items i
JOIN olist_products_dataset p ON i.product_id = p.product_id
JOIN olist_order_payments pay ON i.order_id = pay.order_id
GROUP BY p.product_category_name, pay.payment_type
ORDER BY p.product_category_name, total_payments DESC;
'''

df_sql = pd.read_sql_query(query8,con=engine)
df_sql.head()

