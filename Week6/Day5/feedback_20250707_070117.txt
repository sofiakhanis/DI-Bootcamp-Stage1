URL: https://github.com/sofiakhanis/DI-Bootcamp-Stage1/blob/main/Week6/Day5/W6d5EXP.sql
suggestions for improvement:
- Use more descriptive aliases for tables. For example, instead of `m` for `movie`, use `movies`.
- Add comments to explain complex queries or particularly tricky parts of the code. This improves readability and maintainability.
- For performance optimization, consider adding indexes to frequently joined columns in the tables. This will reduce the query execution time, especially for large datasets.
- While the queries are correct, consider adding error handling in a production environment.  Check for NULL values or unexpected data types that could lead to query failures.
Brief justification:
- correctness: All queries accurately address the tasks outlined in Exercise 1 and Exercise 2.  Each task uses the specified window functions (`RANK()`, `NTILE()`, `SUM()`, `DENSE_RANK()`, `FIRST_VALUE()`), CTEs where appropriate, and correctly produces the requested output based on the described data relationships.  The code directly and completely implements the functionality described in the Chapter Content/Questions.
- readability: The code is well-formatted and easy to follow. The use of aliases could be more descriptive.  Adding comments would further enhance readability, particularly for those unfamiliar with the database schema.
- performance: The queries are generally efficient. However, for production-level performance, indexes on relevant columns would significantly speed up query execution, especially with larger datasets.  The `DISTINCT ON` clause in one query might not scale as well as alternative approaches for very large datasets.  Careful consideration of indexes is crucial for performance.
- security: The provided SQL code does not present any obvious security vulnerabilities. It's assumed the database is secured appropriately at the server level, preventing SQL injection or other malicious attacks.  The code itself only performs read operations.

