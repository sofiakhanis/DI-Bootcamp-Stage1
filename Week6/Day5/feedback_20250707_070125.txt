URL: https://github.com/sofiakhanis/DI-Bootcamp-Stage1/blob/main/Week6/Day5/DailyChallDay5.sql
suggestions for improvement:
- The code for Task 1 could be improved by handling cases where a production company has only one movie.  The current `LAG()` function will return `NULL` for the first movie, leading to a `NULL` growth rate. Consider handling this explicitly or using a different approach to calculate growth rate for the first movie, possibly setting it to 0. 
- In Task 2, using an implicit join (FROM movie, avg_rating_cte) is less readable and maintainable than an explicit JOIN. It's also potentially less performant. Change to an explicit JOIN using `JOIN` keyword.
- The query for Task 3 calculates a rolling average of the last three movies. This is accurate to the prompt's specification. However, consider adding a check for cases where there are fewer than three movies in a genre â€“ the `AVG()` function will still work but it might not be what's intended.
- Task 4's solution assumes that a shared keyword implies a series. This might not be entirely accurate.  The prompt does not define the meaning of 'movie series', so the approach is justifiable, however adding a comment explaining the assumptions made could improve the solution's clarity. Add a comment stating assumptions for defining a 'movie series'.
Brief justification:
- correctness: Each SQL query directly addresses the corresponding task in the Chapter Content/Questions.  Task 1 calculates the average budget growth rate for each production company using window functions and handling nulls. Task 2 correctly identifies the most consistently high-rated actor using window functions and CTEs. Task 3 uses window functions with the `ROWS` frame specification to calculate the rolling average revenue. Task 4 uses window functions and CTEs to identify the movie series with the highest total revenue. All the queries are structured to answer the stated objectives.
- readability: The code is generally well-structured and easy to follow. CTEs are used effectively to break down complex queries into smaller, more manageable parts. However, minor improvements in variable naming, commenting, and explicit join syntax could enhance readability. 
- performance: The queries are reasonably efficient for the given tasks. However, there is room for optimization, especially in handling `NULL` values and using more efficient join methods (explicit joins are preferred over implicit ones).  The use of CTEs does improve performance by allowing for efficient subquery reuse, but performance could be further optimized by adding indexes to relevant columns. 
- security: The provided SQL code does not contain any apparent security vulnerabilities as it's focused purely on data analysis from a predefined database.  No user input is involved, and there are no SQL injection risks.

