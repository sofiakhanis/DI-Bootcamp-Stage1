URL: https://github.com/sofiakhanis/DI-Bootcamp-Stage1/blob/main/Week6/Day2/exp/dvdrental.sql
suggestions for improvement:
- The query for finding the next 10 cheapest movies (after the first 10) could be improved for efficiency.  Using `OFFSET` and `LIMIT` can be inefficient for large datasets. Consider using window functions for better performance.
- Add comments to the queries to explain the purpose of each query and the logic used. This enhances readability and maintainability.
- For the query that searches for a favorite movie and then movies starting with the first two letters, it's assumed 'FAVORITE_MOVIE' and 'SH%' are placeholders. The instructions should be clearer and demonstrate parameterization for better security and reusability.  The user should be prompted to provide input.
- The bonus query finding which city is in which country is very simple.  Consider adding more challenging bonus queries to extend the learning.
Brief justification:
- correctness: The provided SQL queries directly address all the exercises in the chapter content.  They accurately retrieve the requested data from the specified tables (customer, film, address, etc.). The queries demonstrate a solid understanding of SQL syntax including joins, aggregate functions, ordering, limiting results, and using aliases. The only slight deviation is in the efficiency of query 11 which could be significantly improved.  The queries align directly with the chapterâ€™s focus on basic SQL requests and database concepts (database, table, row, column).
- readability: The queries are generally well-formatted and easy to understand.  However, adding comments to explain the purpose and logic of each query would significantly improve readability, especially for someone unfamiliar with the dataset.
- performance: Most queries are reasonably efficient.  The query for finding the next 10 cheapest movies (exercise 11) is less efficient due to the use of `OFFSET` and `LIMIT` on a large table. This approach becomes inefficient with bigger datasets. Window functions would be a far superior option for better performance. Using `IN` statements with numerous values can also be less efficient than other methods. The queries are suitable for this exercise's database size, but could benefit from optimization strategies for significantly larger datasets.
- security: The queries don't have any obvious security vulnerabilities.  No user-supplied data is directly incorporated into the SQL queries, thus preventing SQL injection. The assumed use of placeholders in the movie search queries is a risk and needs clarification/parameterization.

