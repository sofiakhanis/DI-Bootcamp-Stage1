# -*- coding: utf-8 -*-
"""DailyChallengeW8D1ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TQIVCO_J4JBtmn23u7er4nFmJHhf9kuW
"""

!apt-get update > /dev/null
!apt install chromium-chromedriver > /dev/null
!pip install selenium beautifulsoup4 pandas matplotlib seaborn > /dev/null

import sys
sys.path.insert(0, '/usr/lib/chromium-browser/chromedriver')

from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re
from datetime import datetime


options = Options()
options.add_argument("--headless")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")

driver = webdriver.Chrome(options=options)


url = "https://www.bbc.com/weather/293397"
driver.get(url)


WebDriverWait(driver, 20).until(
    EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".wr-day"))
)

soup = BeautifulSoup(driver.page_source, "html.parser")
driver.quit()

forecast_cards = soup.select(".wr-day")

data = []
for card in forecast_cards:
    try:
        date_str = card.select_one(".wr-date").get_text(strip=True)
        day = card.select_one(".wr-day__title").get_text(strip=True)
        temp = card.select_one(".wr-value--temperature--c").get_text(strip=True).replace("°", "")
        weather = card.select_one(".wr-day__weather-type-description").get_text(strip=True)
        data.append({
            "day": day,
            "date": date_str,
            "temperature_C": int(temp),
            "condition": weather
        })
    except:
        continue

df = pd.DataFrame(data)

df["date"] = df["date"]
print("Average temperature:", round(df["temperature_C"].mean(), 1), "°C")
print("Most common condition:", df["condition"].mode().iloc[0])

sns.set(style="whitegrid")


plt.figure(figsize=(10,5))
sns.lineplot(data=df, x="date", y="temperature_C", marker="o")
plt.title("Daily Temperature Forecast - Tel Aviv (BBC)")
plt.xlabel("Date")
plt.ylabel("Temperature (°C)")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()


plt.figure(figsize=(10,5))
sns.countplot(data=df, y="condition", order=df["condition"].value_counts().index)
plt.title("Forecast Condition Frequency")
plt.xlabel("Count")
plt.ylabel("Condition")
plt.tight_layout()
plt.show()